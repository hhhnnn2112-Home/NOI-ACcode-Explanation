01:数制转换
#include<iostream>
#include<string>
#include<algorithm>

using namespace std;

string getAns(string CusNum, int Format, int AnsFormat) {
	string Ans = "";
	int DecNum = 0;
	const char Num2Char[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A',
							   'B', 'C', 'D', 'E', 'F' };
	
	for (int i = 0; i < CusNum.length(); ++i) {
		if ('0' <= CusNum[i] && CusNum[i] <= '9') {
			CusNum[i] -= '0';
		}
		else if ('a' <= CusNum[i] && CusNum[i] <= 'f') {
			CusNum[i] -= ('a' - 10);
		}
		else {
			CusNum[i] -= ('A' - 10);
		}

		DecNum += CusNum[i] * pow(Format, CusNum.length() - i - 1);
	}

	if (DecNum == 0) { /* 特殊情况 */
		Ans += '0';
		return Ans;
	}

	while (DecNum > 0) { 
		Ans += Num2Char[DecNum % AnsFormat]; /* 按照之前声明的表，找到对应的值 */
		DecNum /= AnsFormat;
	}

	reverse(Ans.begin(), Ans.end()); /* 字符串需要倒序 */

	return Ans;
}

int main(void) {
	int a, b;
	string n;
	cin >> a >> n >> b;
	cout << getAns(n, a, b);
	return 0;
}
02:不吉利日期
#include<iostream>

using namespace std;

int main(void) {
	const int Months[] = { 0, 12, 31, 28, 31, 30, 31, 30, 31, 31, 30,
						  31, 30, 31 };

	int w;
	cin >> w;
	for (int i = 1; i <= 12; ++i) {
		w += (Months[i] % 7);
		w %= 7;

		if (w == 5) {
			cout << i << endl;
		}
	}

	return 0;
}
03:八进制小数
#include<iostream>
#include<string>
#include<iomanip>
#include<cmath>

using namespace std;

int main(void) {
	string OctNum;
	cin >> OctNum;

	double Ans = 0;
	for (int i = OctNum.length() - 1; i >= 2; --i) {
		Ans += (OctNum[i] - '0') * 1.0;
		Ans /= 8;
	}

	/* 这里注意一下C++中的输出格式控制 */
	cout << OctNum << " [8] = " << setiosflags(ios::fixed) 
		 << setprecision(3 * (OctNum.length() - 2)) << Ans << " [10]" << endl;

	return 0;
}
04:垂直直方图
#include<iostream>
#include<string>

using namespace std;

int main(void) {
	int LetHeight[150] = { 0 };
	int MapFlag[325][150] = { 0 };
	int MaxLetHeight = 0;

	for (int i = 1; i <= 4; ++i) {
		string ReadStr;
		getline(cin, ReadStr);
		
		for (int i = 0; i < ReadStr.length(); ++i) {
			if (ReadStr[i] != ' ') { /* 不是空格字符 */
				MapFlag[LetHeight[ReadStr[i]]][ReadStr[i]] = 1;

				if (MaxLetHeight < LetHeight[ReadStr[i]]) {
					MaxLetHeight = LetHeight[ReadStr[i]];
				}

				LetHeight[ReadStr[i]]++;
			}
		}
	}

	for (int i = MaxLetHeight; i >= 0; --i) {
		for (int j = 'A'; j <= 'Z'; ++j) {
			if (MapFlag[i][j] == 1) {
				cout << "* ";
			}
			else {
				cout << "  ";
			}
		}

		cout << endl;
	}

	cout << "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z" << endl;

	return 0;
}
05:素数回文数的个数
#include<iostream>

using namespace std;

/* 是否为质数 */
bool isPrime(int Num) {
	for (int i = 2; i * i <= Num; ++i) {
		if (Num % i == 0) {
			return false;
		}
	}

	return true;
}

/* 是否为回文数 */
bool isPalin(int Num) {
	int Ans = 0, Temp = Num;

	while (Num > 0) {
		Ans = (Num % 10 + Ans * 10);
		Num /= 10;
	}

	if (Ans == Temp) {
		return true;
	}
	else {
		return false;
	}
}

int main(void) {
	int n;
	cin >> n;

	int Cnt = 0;
	for (int i = 11; i <= n; ++i) {
		if (isPalin(i) && isPrime(i)) {
			Cnt++;
		}
	}

	cout << Cnt << endl;

	return 0;
}
06:循环数
这道题博主觉得有些问题，尤其是范围和测试数据。

#include<iostream>
#include<string>
#include<vector>

using namespace std;

int main(void) {
	string NumStr;
	cin >> NumStr;
	int Len = NumStr.length();

	vector<int> Num(65); /* 防止溢出 */
	for (int i = 0; i < Len; ++i) {
		Num[i] = NumStr[i] - '0';
	}

	NumStr += NumStr; /* 运算符重载，使数字串首位相接 */

	vector<int> Ans(65);
	for (int i = 1; i <= Len; ++i) {
		string TempStr = "";
		int Res = 0;
		for (int j = Len - 1; j >= 0; --j) {
			int Temp = Num[j] * i + Res;
			Res = Temp / 10;
			Ans[j] = Temp % 10;
		}
		for (int k = 0; k < Len; ++k) {
			TempStr += (char)Ans[k] + '0';
		}
		if (NumStr.find(TempStr, 0) == -1) {
			cout << '0' << endl;
			return 0;
		}
	}

	cout << '1' << endl;

	return 0;
}
07:玛雅历
#include<iostream>
#include<string>

using namespace std;

string HaabMonName[] = { "pop", "no", "zip", "zotz", "tzec", "xul", "yoxkin", "mol", "chen", 
						 "yax", "zac", "ceh", "mac", "kankin", "muan", "pax", "koyab", "cumhu", "uayet"
};

string TzolkinDayName[] = { "imix", "ik", "akbal", "kan", "chicchan", "cimi", "manik", "lamat", "muluk",
							"ok", "chuen", "eb", "ben", "ix", "mem", "cib", "caban", "eznab", "canac", "ahau"
};

void Haab2Tzolkin(int Day, string Month, int Year) {
	int TotalDay = Year * 365;
	
	int i;
	for (i = 0; i <= 18; ++i) {
		if (Month == HaabMonName[i]) {
			break;
		}
	}

	TotalDay += 20 * i + Day; /* 从0开始的天数 */

	int TzolkinYear = TotalDay / 260; /* 一年260天 */

	TotalDay %= 260; /* 不足260天，构不成一年 */

	string TzolkinName = TzolkinDayName[TotalDay % 20]; /* 20天一个时期 */

	int TzolkinDay = TotalDay % 13 + 1; /* 天数是从1开始计算的 */

	cout << TzolkinDay << " " << TzolkinName << " " << TzolkinYear << endl;
}

int main(void) {
	int Cnt;
	cin >> Cnt;
	cout << Cnt << endl;

	for (int i = 1; i <= Cnt; ++i) {
		int Day;
		string Month;
		int Year;
		char ToolCh;
		cin >> Day >> ToolCh >> Month >> Year;
		Haab2Tzolkin(Day, Month, Year);
	}

	return 0;
}
08:特殊日历计算
#include<iostream>

using namespace std;

bool isLeapYear(int year) {
	if (year % 400 == 0 || year % 4 == 0 && year % 100 != 0) {
		return true;
	}
	return false;
}

void getSpecCal(int hour, int min, int sec, int day, int month, int year) {
	int TotalDay = 0;
	int TotalSec = 0;
	
	/* 年 */
	for (int i = 2000; i < year; ++i) {
		if (isLeapYear(i)) /* 判断闰年 */
			TotalDay += 366;
		else
			TotalDay += 365;
	}

	/* 月 */
	const int ComMonth[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
	for (int i = 0; i < month - 1; ++i) {
		TotalDay += ComMonth[i];
	}
	if (month > 2 && isLeapYear(year)) {
		TotalDay++;
	}

	/* 日 */
	TotalDay += (day - 1);

	/* 小时，分钟，秒 */
	TotalSec += hour * 3600 + min * 60 + sec;
	TotalSec = TotalSec * 125 / 108; /* 该历法的一天和我们的一天一样长 */

	/* 转化 */
	int SpecYear = TotalDay / 1000;
	int SpecMonth = TotalDay % 1000 / 100 + 1;
	int SpecDay = TotalDay % 1000 % 100 + 1;
	int SpecHour = TotalSec / 10000;
	int SpecMin = TotalSec % 10000 / 100;
	int SpecSec = TotalSec % 10000 % 100;

	cout << SpecHour << ":" << SpecMin << ":" << SpecSec << " "
		 << SpecDay << "." << SpecMonth << "." << SpecYear << endl;
}

int main(void) {
	int Cnt;
	cin >> Cnt;

	for (int i = 1; i <= Cnt; ++i) {
		int Hour, Min, Sec, Day, Month, Year;
		char ToolChar;
		cin >> Hour >> ToolChar >> Min >> ToolChar >> Sec >> Day >> ToolChar >> Month  >> ToolChar >> Year;
		getSpecCal(Hour, Min, Sec, Day, Month, Year);
	}

	return 0;
}
10:判决素数个数
#include<iostream>

using namespace std;

bool isPrime(int Num) {
	for (int i = 2; i * i <= Num; ++i) {
		if (Num % i == 0)
			return false;
	}
	return (Num != 1);
}

int main(void) {
	int X, Y;
	cin >> X >> Y;

	if (X > Y) /* 这里是一个扣分点 */
		swap(X, Y);

	int Cnt = 0;
	for (int i = X; i <= Y; ++i) {
		if (isPrime(i))
			Cnt++;
	}

	cout << Cnt << endl;

	return 0;
}


12:分数求和
总时间限制:
1000ms
内存限制:
65536kB
描述
输入n个分数并对他们求和，并用最简形式表示。所谓最简形式是指：分子分母的最大公约数为1；若最终结果的分母为1，则直接用整数表示。

如：5/6、10/3均是最简形式，而3/6需要化简为1/2, 3/1需要化简为3。

分子和分母均不为0，也不为负数。
输入
第一行是一个整数n，表示分数个数，1 <= n <= 10；
接下来n行，每行一个分数，用"p/q"的形式表示，不含空格，p，q均不超过10。
输出
输出只有一行，即最终结果的最简形式。若为分数，用"p/q"的形式表示。
样例输入
2
1/2
1/3
样例输出
5/6
思路：首先这道题目要用到约分和通分，所以我写了两个函数gcd（最大公约数）和lcd（最小公倍数），然后因为题目要有输入，所以这里我将两个分数全部初始化为0（num1/num2,num3/num4）,一个代表原来的和，一个代表即将输入得数，当输入之后，就要求这两个分数的最小公倍数，以便我们做加法运算，然后加完找最大公约数，不至于出现数据溢出的问题，到最后输入如果分母不是1就输出两个数，如果是就只输出分子，也可以用ifelse语句，只不过我嫌麻烦...就用了三目运算符...应该能看懂。代码就没加注释了，还有就是头文件，很多是用不到的，由于我写代码只改主函数部分就没删了。。
#include<iostream>
#include<cstdlib>
#include<algorithm>
#include<iomanip>
#include<math.h>
#include<cstdio>
using namespace std;
int gcd(int a,int b)//最大公约数 
{
    if(b==0) return a;
    return gcd(b,a%b);
}
int lcd(int a,int b)//最小公倍数 
{
	int c;
	if(a<=0||b<=0) return -1;
    c=gcd(a,b); 
    return a*b/c;
}
int main()
{	
    int n,d,num1=0,num2=1,num3=0,num4=1;
    cin>>n;
    char c;
    while(n--)
    {
    	scanf("%d%c%d",&num1,&c,&num2);
    	d=lcd(num2,num4);
    	num3=num3*d/num4+num1*d/num2;
    	num4 =d;
    	d=gcd(num3,num4);
    	if(d>1)
    	{
    		num3/=d;
    		num4/=d;
		}
	}
	num4>1?printf("%d/%d",num3,num4):printf("%d",num3);
	 
}



29：统计字符数
总时间限制：1000ms 内存限制：65536kB

描述

给定一个由a-z这26个字符组成的字符串，统计其中哪个字符出现的次数最多。

输入

输入包含一行，一个字符串，长度不超过1000。

输出

输出一行，包括出现次数最多的字符和该字符出现的次数，中间以一个空格分开。如果有多个字符出现的次数相同且最多，那么输出ascii码最小的那一个字符。

样例输入

abbccc

样例输出

c 3

这道题目和我写的上一篇博客采用的思想基本一致，链接如下：
众数（哈尔滨工业大学）

方法一：双数组法

代码如下：

#include<iostream>
#include<cstring>
using namespace std;
#define num 1001
char s[num];
int a[150];
int main()
{
 	int max=0,max_n=0;
 	cin >> s;
 	int len=strlen(s);
 	for(int i=0; i<len; ++i)
 	{
  		a[s[i]]++;
 	}
 	for(int i=97; i<123; ++i)
 	{
 		 if(a[i]>max)
  		{
   			max=a[i];
   			max_n=i;
  		}
 	}
 	cout << (char)max_n << " " << max;
	return 0;
}



13:人民币支付
查看
提交
统计
提问
总时间限制: 
1000ms
内存限制: 
65536kB
描述
从键盘输入一指定金额（以元为单位，如345），然后输出支付该金额的各种面额的人民币数量，显示100元，50元，20元，10元，5元，1元各多少张，要求尽量使用大面额的钞票。

输入
一个小于1000的正整数。
输出
输出分行，每行显示一个整数，从上到下分别表示100元，50元，20元，10元，5元，1元人民币的张数
样例输入
735
样例输出
7
0
1
1
1
0

 1 #include<iostream>
 2 #include<cstdio>
 3 #include<queue>
 4 #include<cmath>
 5 using namespace std;
 6 int main() 
 7 {
 8     int n;
 9     cin>>n;
10     cout<<n/100<<endl;//100
11     n=n%100;
12     cout<<n/50<<endl;//100
13     n=n%50;
14     cout<<n/20<<endl;//100
15     n=n%20;
16     cout<<n/10<<endl;//100
17     n=n%10;
18     cout<<n/5<<endl;//100
19     n=n%5;
20     cout<<n/1<<endl;//100
21     n=n%1;
22     return 0;
23 }
 



14:求满足条件的3位数
查看
提交
统计
提问
总时间限制: 
1000ms
 
内存限制: 
65536kB
描述
编写程序，按从小到大的顺序寻找同时符合条件1和2的所有3位数，条件为： 
1.该数为完全平方数 
2.该数至少有2位数字相同 
例如，100同时满足上面两个条件。

输入
输入一个数n，n的大小不超过实际满足条件的3位数的个数。
输出
输出为第n个满足条件的3位数(升序)
样例输入
1
样例输出
100
复制代码
 1 #include<iostream>
 2 #include<cstdio>
 3 #include<cmath>
 4 #include<cstring>
 5 using namespace std;
 6 int tot;
 7 int i=99;
 8 int a[11];
 9 int main()
10 {
11     int n;
12     cin>>n;
13     while(tot<n)
14     {
15         memset(a,0,sizeof(a));
16         if(sqrt(i)!=ceil(sqrt(i)))
17         {
18             i++;
19             continue;
20         }
21         int c=i;
22         int now=0;
23         while(c!=0)
24         {
25             a[c%10]++;
26             if(a[c%10]>=2)
27             {
28                 tot++;
29                 if(tot==n)cout<<i;
30                 else i++;
31                 break;
32             }
33             else
34             c=c/10;
35         }
36         i++;
37     }
38     return 0;
39 }





15:求序列中的众数
查看
提交
统计
提问
总时间限制:
1000ms
内存限制:
65536kB
描述
输入一个长度为N的整数序列 (不多于128个整数)，每个整数的范围在[-1052,1052]，计算这个序列的众数。

众数是指出现次数最多的那个数。

如果有多个数出现的次数都达到最多，则取在原序列最先出现的数为众数；如果所有的数都相等，则返回"no"。

输入
第一行为序列长度N。

然后是N个数，每一个数的范围都是在[-10^52,10^52]。 注意，这N个数之间可能有若干个空行隔开。

注意，输入数据可能有一些冗余表达信息，具体来说：

1） 正数和0前面可能有前导0和'+'符号，例如
+000123=123
+0000=0
-0000=0
2）每个数字中不含有空格和其他非数字字符，例如不会出现"100 0"或者"- 100"。
3）每个数字前面至多有一个符号，即不会出现+(-1)、-(+4)和-(-1)等情况。
输出
输出只有 1 行：

该序列的众数或者”no”。

如果有多个数出现的次数都达到最多，则取最先出现的数为众数，并且输出形式应该最简形式。

例如，如果原序列众数为+000123，则输出123；如果原序列众数为+0000或者-0000或者0000,输出0。

负数正常输出，例如：如果原序列众数为-000000001111，就输出-1111。
样例输入
6
-00001
10000
00011111111111111111111111111111111111
-01
+000000011111111111111111111111111111111111
-00000000000001
样例输出
-1
查看
提交
统计
提问

代码：


#include<iostream>
#include<cstring>
#include<cmath>
#include<algorithm>
using namespace std;
 
struct data{
	int sum;
	char c[10000];
}p[130];
 
void fun(char *w,int k,int f){//化简有效数字 
	if(w[0]=='+'||w[0]=='-')k++;
	if(w[0]=='-')f=0;
	while(w[k]=='0')k++;
	
	char t[1000];
	int j=0;
	if(!f){
		t[0]='-';
		j++;
	}
	for(int i=k;w[i]!='\0';i++){
		t[j]=w[i];
		j++;
	}
	t[j]='\0';
	
	if(strcmp(t,"-")==0)strcpy(t,"0");
	else if(strcmp(t,"")==0)strcpy(t,"0");
	strcpy(w,t);
}
 
int main(){
	int n,num=0,maxsum=1;
	char c[1000];
	scanf("%d",&n);
	
	int len=0; 
	while(n!=num){
		char w[10000];
		int f=1;
		scanf("%s",w);
		if(strcmp(w,"")==0)continue;
		
		int k=0,j;
		fun(w,k,f);
//		printf("-- %s\n",w);
		
		for(j=0;j<len;j++){
			if(strcmp(p[j].c,w)==0){
				p[j].sum++;
				break;
			}
		}
		if(j>=len){
			strcpy(p[len].c,w);
			p[len].sum=1;
			len++;
		}
 
		num++;
	}
	if(len==1&&n>len)printf("no\n");
	else{
		int k=0;
		for(int i=0;i<len;i++){
//			printf("-- %d\n",p[i].sum);
			if(p[i].sum>p[k].sum)k=i;
		}
		printf("%s\n",p[k].c);
	}
	return 0;
}




16:最长单词2
总时间限制: 1000ms 内存限制: 65536kB
描述
一个以’.'结尾的简单英文句子，单词之间用空格分隔，没有缩写形式和其它特殊形式，求句子中的最长单词。

输入
一个以’.'结尾的简单英文句子（长度不超过500），单词之间用空格分隔，没有缩写形式和其它特殊形式。
输出
该句子中最长的单词。如果多于一个，则输出第一个
样例输入
I am a student of Peking University.
样例输出
University
解析：
1.设置一个结构体记录单词在主串中的位置和长度，这样既可以对单词按从大到小的顺序排序，而且可以找到单词的位置。
2.在主串中进行操作，记下单词的起始位置和长度，这样只需要遍历一次主串，外加排序的时间就可以了。

#include<iostream>
#include<cstring>
#include<math.h>
#include<algorithm>
#include<string>
using namespace std;
typedef struct Word{//每个单词在主串的起始位置和单词长度
	int begin,length;
};
struct Rule1{//对每个单词按照单词长度进行排序，这是排序规则
	bool operator()(const Word &a1,const Word &a2){
		return a1.length>a2.length;
	}
};
int main(){
	char str[505];
	gets(str);
	
	Word word[505];
	int maxLen=-1;
	int maxIndex=-1;
	int j=0;
	for(int i=0;i<strlen(str);i++){
		if(i==0){//主串的第一个字母
			word[j].begin=i;
			word[j].length=1;	
			if(word[j].length>maxLen){
				maxLen=word[j].length;
				maxIndex=j;
			}			
		}else{
			//单词开始 
			if(str[i]!=' '&&str[i-1]==' '){
				j++;
				word[j].begin=i;
				word[j].length=0;
			}		
			//单词中的每个字母处理		
			if(str[i]!=' '&&i!=strlen(str)-1){
				word[j].length++;
			}
			//单词结尾 
			if(str[i]!=' '&&(str[i+1]==' '||str[i+1]=='.')){
				if(word[i].length>maxLen){
					maxLen=word[i].length;
					maxIndex=i-word[i].length+1;
				}
			}			
		}
	}
	
	
	sort(word,word+j+1,Rule1());//对单词按单词长度进行排序
	
	for(int i=word[0].begin;i<word[0].begin+word[0].length;i++){
		cout<<str[i];
	}
	
	
	
	
	return 0;
} 



17: 文字排版最近的提交
 1 #include<cstdio>
 2 #include<string>
 3 #include<cstring>
 4 #include<iostream>
 5 //#include<algorithm>#include<cstdlib>#include<cmath>
 6 using namespace std;
 7 char a[40],t[40];
 8 int main()
 9 {
10     //freopen("in.txt","r",stdin);
11     //freopen("out.txt","w",stdout);
12     int tlen=0,n;
13     bool w=1;
14     cin>>n;
15     while(~scanf("%s",a))
16     {
17         tlen+=strlen(a);
18         if(tlen<=80)
19         {
20             tlen++;
21         }
22         else
23         {
24             cout<<endl;
25             w=1;
26             tlen=strlen(a)+1;
27         }
28         if(w)
29         {
30             printf("%s",a);
31             w=0;    
32         }
33         else printf(" %s",a);
34     }
35     return 0;    
36 }
 


19:啤酒厂选址
总时间限制: 1000ms 内存限制: 65536kB
描述
海上有一个岛，在环海边上建有一条环岛高速公路，沿着公路有n（5 < n < 10000）个居民点，
假设每个居民点有一个编号，从0开始，按顺时针依次从小到大（即，0,1，…，n-1）编号。
在岛上啤酒很受青睐。某啤酒企业计划在岛上投资建一个啤酒厂，并根据啤酒需求每天向居住点送啤酒。
已知两个相邻的居民点的距离以及每个居住点每天的啤酒需求量（假设每个居住点每天不超过2000桶）。
假定每单位长度的路程送一桶啤酒需要的费用恒定（为单位费用）。请问，选择哪一个居民点建啤酒厂，
才能使每天送啤酒的费用最小（空车不计费用）。

输入
第一行：为居民点数目n
后面为n行，每行为一个居民点的啤酒需求量以及按顺时针离下一个居民点的距离（均为整数,空格间隔），
从编号为0的开始，按单增顺次给出。

注意：后面第n行对应于居民点（n-1)的啤酒需求量以及到编号为0的居民点距离。
输出
啤酒厂所在的居民点编号以及每天的运输费用，其间以逗号间隔
样例输入
6
500 10
300 30
350 25
400 60
700 28
200 35
样例输出
0,94100

解析：
下面以第一个村庄作为起始点(数轴零点)，顺时针方向为数轴正方向
先计算每个村庄在数轴上的坐标；
利用两个村庄的坐标可以方便地计算两个村庄的顺时针距离t1；
利用环形公路周长sum和t1可以计算两个村庄逆时针距离t2；
t1和t2比较小的那一个即为两个村庄的最短距离。

依次将所有村庄当做建厂点，计算该方案的运费。
枚举完所有的方案后即可知道最小花费的方案。

本题真实的测试数据肯定没到10^4，否则本算法复杂度O（n^2）是无法通过的。

复制代码
 1 #include<stdio.h>
 2 #include<stdlib.h>
 3 #include<math.h>
 4 struct obj
 5 {
 6     long long num;//该村庄啤酒需求量
 7     long long dis;//该村庄距离下一个村庄的距离（顺时针的下一个村庄）
 8     long long d;  //该村庄距离起始点的距离（相当于顺时针坐标）
 9 };
10 int main()
11 {
12     long long n,i,j;
13     struct obj *a;
14     long long sum=0;//环形公路总长
15     long long cost,minCost,minIndex;//某种建厂方案的话费；历史上各种建厂方案的最小花费
16     long long distance,t1,t2;
17 
18     freopen("data.in","r",stdin);
19     scanf("%lld",&n);
20     a=(struct obj *)malloc(sizeof(struct obj)*n);
21     for(i=0;i<n;i++)
22     {
23         scanf("%lld%lld",&a[i].num,&a[i].dis);
24         sum=sum+a[i].dis;
25     }
26 
27     a[0].d=0;//第一个村庄作为起始点
28     for(i=1;i<n;i++)
29     {
30         a[i].d=a[i-1].d+a[i-1].dis;
31     }
32 
33     minCost=0;
34     for(i=0;i<n;i++)//依次考虑选择第i个村庄做建厂点
35     {
36         cost=0;
37         for(j=0;j<n;j++)//计算从其他村庄运输到第i个村的费用
38         {
39             if(j==i) continue;
40             else
41             {
42                 t1=fabs(a[i].d-a[j].d);
43                 t2=sum-t1;
44                 distance=t1<t2?t1:t2;
45                 cost=cost+a[j].num*distance;
46             }
47         }
48         if(cost<minCost||minCost==0) { minCost=cost; minIndex=i; }
49     }
50     printf("%lld,%lld\n",minIndex,minCost);
51     return 0;
52 }


20:话题焦点人物
查看
提交
统计
提问
总时间限制: 
1000ms
 
内存限制: 
65536kB
描述
微博提供了一种便捷的交流平台。一条微博中，可以提及其它用户。例如Lee发出一条微博为：“期末考试顺利 @Kim @Neo”，则Lee提及了Kim和Neo两位用户。

我们收集了N(1 < N < 10000)条微博，并已将其中的用户名提取出来，用小于等于100的正整数表示。

通过分析这些数据，我们希望发现大家的话题焦点人物，即被提及最多的人（题目保证这样的人有且只有一个），并找出那些提及它的人。

输入
输入共两部分：
第一部分是微博数量N，1 < N < 10000。
第二部分是N条微博，每条微博占一行，表示为：
发送者序号a，提及人数k(0 < = k < = 20)，然后是k个被提及者序号b1,b2...bk；
其中a和b1,b2...bk均为大于0小于等于100的整数。相邻两个整数之间用单个空格分隔。
输出
输出分两行：
第一行是被提及最多的人的序号；
第二行是提及它的人的序号，从小到大输出，相邻两个数之间用单个空格分隔。同一个序号只输出一次。
样例输入
5
1 2 3 4
1 0
90 3 1 2 4
4 2 3 2
2 1 3
样例输出
3
1 2 4
来源
医学部计算概论2011年期末考试（谢佳亮）
复制代码
 1 #include<iostream>
 2 #include<algorithm>
 3 using namespace std;
 4 struct node
 5 {
 6     int fsz;//发送者 
 7     int rs;//人数
 8     int tjz[80];//提及者 
 9     int tjnow;//已经提及的人数 
10 }a[10001];
11 int btj[1000001];
12 int maxn=-1;//被提及最多的人的次数
13 int bh;//被提及最多的人得编号 
14 int zdbh;//最大编号 
15 int bc[10001];
16 int now=0;
17 int main()
18 {
19     int n;
20     cin>>n;
21     for(int i=1;i<=n;i++)
22     {
23         cin>>a[i].fsz;
24         a[i].tjnow=1;
25         if(a[i].fsz>zdbh)
26         zdbh=a[i].fsz;
27         cin>>a[i].rs;
28         for(int j=a[i].tjnow;j<a[i].rs+a[i].tjnow;j++)
29         {
30             cin>>a[i].tjz[j];
31             btj[a[i].tjz[j]]++;
32             if(btj[a[i].tjz[j]]>maxn)
33             {
34                 maxn=btj[a[i].tjz[j]];
35                 bh=a[i].tjz[j];
36             }
37         }
38         a[i].tjnow=a[i].rs+a[i].tjnow;
39     }
40     cout<<bh<<endl;
41     for(int i=0;i<=9999;i++)
42     {
43         for(int j=1;j<=a[i].rs;j++)
44         {
45             if(a[i].tjz[j]==bh)
46             {
47                 bc[now]=a[i].fsz;
48                 now++;
49             }
50         }
51     }
52     sort(bc+0,bc+now);
53     for(int i=0;i<now;i++)
54     {
55         if(bc[i]==bc[i+1])
56         continue;
57         else cout<<bc[i]<<" ";
58     }
59     return 0;





21:最大质因子序列


#include<bits/stdc++.h>
using namespace std;
int a[1000];
int s[5000];
int t=1;
void get(int n)
{
	for(int i=2;i<=n;i++)
	{
		if(!s[i]) //i不是质数 
		{
			a[t]=i; //加入到质数数组 
			t++; //个数加一 
			for(int j=i*i;j<=n;j=j+i) //筛选到当前数的倍数 
			{
				s[j]=1; 
			}
		}
	}
}
int f(int n)
{
	for(int j=t-1;j>=0;j--) //从最大的数质数开始筛选 
	{
		if(n%a[j]==0)
		return a[j];
	}	
}
int main()
{
	int m,n;
	cin>>m>>n;
	get(5000);
	for(int i=m;i<n;i++)
	{
		cout<<f(i)<<',';
	}
	cout<<f(n);
	cout<<endl;
}
 


22:因子分解
#include <iostream>
 
using namespace std;
int sum[100];
int main(){
	int n;
	cin>>n;
	int num=n;
	int k=2;
	while(n>1){
		if(n%k==0){
			sum[k]++;
			n/=k;
			k=2;
		}else k++;
	}
	int flag=0;
	for(int i=2;i<=num;i++){
		if(sum[i]>0){
			if(sum[i]>1){
				if(flag==0) cout <<i<<"^"<<sum[i];
				else cout << "*"<<i<<"^"<<sum[i];
			}else{
				if(flag==0) cout << i;
				else cout <<"*"<< i;
			}
			flag=1;
		}
	}
	return 0;
}
 


26:n-gram串频统计
总时间限制:
1000ms
内存限制:
65536kB
描述
在文本分析中常用到n-gram串频统计方法，即，统计相邻的n个单元（如单词、汉字、或者字符）在整个文本中出现的频率。假设有一个字符串，请以字符为单位，按n-gram方法统计每个长度为 n 的子串出现的频度，并输出最高频度以及频度最高的子串。所给的字符串只包含大小写字母，长度不多于500个字符，且 1 < n < 5。
如果有多个子串频度最高，则根据其在序列中第一次出现的次序依次输出，每行输出一个，如果最高频度不大于1，则输出NO。
输入
第一行为n；
第二行为字符串。
输出
输出最高频度以及频度最高的所有子串。若最高频度不大于1，只输出一行NO。
样例输入
3
abcdefabcd
样例输出
2
abc
bcd
提示
样例中，所有的3-gram是：abc,bcd,cde,def,efa,fab,abc,bcd。最后面的cd不足以形成3-gram，则不考虑。这样，abc 和 bcd 都出现了2次，其余的只出现了1次。
来源
元培-From Whf

答案：用map;
做这题的目的主要是学会使用map；
想学map的人一定要搞懂这题哦！

#include<iostream>
#include<vector>
#include<map>
#include <string>
using namespace std;
map<string, int> m;
vector<string> v;
int main() {
    int n, pos, Max = -1;
    cin >> n;
    string s, temp = "";
    cin >> s;
    for (int i = 0; i <= s.length() - n; i++) {
        for (int j = i; j<i + n; j++) {
            temp += s[j];
        }
        v.push_back(temp);
        m[temp]++;
        if (Max<m[temp])Max = m[temp];
        temp = "";
    }
    if (Max <= 1) {
        cout << "NO"; return 0;
    }
    cout << Max << endl;
    vector<string>::iterator it;
    for (it = v.begin(); it != v.end(); it++) {
        if (m[(*it)] == Max) {
            cout << (*it) << endl;
            m[(*it)] = -1;
        }
    }
    return 0;
}

、




25:计算两个日期之间的天数
查看
提交
统计
提问
总时间限制: 
1000ms
 
内存限制: 
65536kB
描述
给定两个日期，计算相差的天数。比如2010-1-1和2010-1-3相差2天。


输入
共两行：
第一行包含三个整数startYear，startMonth，startDay，分别是起始年、月、日。
第二行包含三个整数endYear，endMonth，endDay，分别是结束年、月、日。
相邻两个整数之间用单个空格隔开。

年份范围在1~3000。保证日期正确且结束日期不早于起始日期。
输出
输出一个整数，即是两个日期相差的天数。
样例输入
2008 1 1
2009 1 1
样例输出
366
提示
闰年被定义为能被4整除的年份，但是能被100整除而不能被400整除的年是例外，它们不是闰年。闰年的2月份有29天。
复制代码
 1 #include<iostream>
 2 using namespace std;
 3 int bgyear,bgmonth,bgday;
 4 int enyear,enmonth,enday;
 5 int month[21]={0,31,28,31,30,31,30,31,31,30,31,30,31};//非闰年
 6 int rmonth[21]={0,31,29,31,30,31,30,31,31,30,31,30,31};//闰年 
 7 int flag=1;
 8 int tot=0;
 9 int main()
10 {
11     cin>>bgyear>>bgmonth>>bgday;
12     cin>>enyear>>enmonth>>enday;
13     for(int i=bgyear;i<=enyear+1;i++)//寻找年数上的差异 
14     {
15         if((i%4==0&&i%100!=0)||(i%400==0))
16         {
17             for(int j=1;j<=12;j++)
18             {
19                 if(i==bgyear&&j<bgmonth)
20                 continue;//寻找开始月份
21                 for(int k=1;k<=rmonth[j];k++)
22                 {
23                     if(i==enyear&&j==enmonth&&k==enday)
24                     {
25                         cout<<tot;
26                         return 0;
27                     }
28                     if(k<bgday&&flag==1)
29                     continue;
30                     else
31                     {
32                         flag=0;
33                         tot++;
34                     }
35                     
36                 }
37                  
38             }
39         }//闰年 
40         else
41         {
42         
43             for(int j=1;j<=12;j++)
44             {
45                 if(i==bgyear&&j<bgmonth)
46                 continue;//寻找开始月份
47                 for(int k=1;k<=month[j];k++)
48                 {
49                     if(i==enyear&&j==enmonth&&k==enday)
50                     {
51                         cout<<tot;
52                         return 0;
53                     }
54                     if(k<bgday&&flag==1)
55                     continue;
56                     else
57                     {
58                         flag=0;
59                         tot++;
60                     }
61                     
62                 }
63                  
64             }
65         }//非闰年 
66     }
67     cout<<tot;
68     return 0;
69 }




24:打印月历
查看
提交
统计
提问
总时间限制: 
1000ms
内存限制: 
65536kB
描述
给定年月，打印当月的月历表。

输入
输入为一行两个整数，第一个整数是年份year（1900 ≤ year ≤ 2099），第二个整数是月份month（1 ≤ month ≤ 12），中间用单个空格隔开。
输出
输出为月历表。月历表第一行为星期表头，如下所示：
Sun Mon Tue Wed Thu Fri Sat
其余各行一次是当月各天的日期，从1日开始到31日（30日或28日）。
日期数字应于星期表头右对齐，即各位数与星期表头相应缩写的最后一个字母对齐。日期中间用空格分隔出空白。
样例输入
2006 5
样例输出
Sun Mon Tue Wed Thu Fri Sat
      1   2   3   4   5   6
  7   8   9  10  11  12  13
 14  15  16  17  18  19  20
 21  22  23  24  25  26  27
 28  29  30  31
提示
闰年判断方法：能被4整除但不能被100整除，或者能被400整除。
1900年1月1日是周一。
  1 #include<iostream>
  2 using namespace std;
  3 int bgyear,bgmonth,bgday;
  4 int enyear,enmonth,enday;
  5 int month[21]={0,31,28,31,30,31,30,31,31,30,31,30,31};//非闰年
  6 int rmonth[21]={0,31,29,31,30,31,30,31,31,30,31,30,31};//闰年 
  7 int flag=1;
  8 int tot=0;
  9 int dow=1;
 10 string week[8]={"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 11 int main()
 12 {
 13     cin>>enyear>>enmonth;
 14     bgyear=1900;
 15     bgmonth=1;
 16     bgday=1;
 17     for(int i=1900;i<=enyear;i++)//寻找年数上的差异 
 18     {
 19         if((i%4==0&&i%100!=0)||(i%400==0))
 20         {
 21             for(int j=1;j<=12;j++)
 22             {
 23                 for(int k=1;k<=rmonth[j];k++)
 24                 {
 25                     if(i==enyear&&j==enmonth)
 26                         {
 27                             int bj=0;
 28                             cout<<"Sun Mon Tue Wed Thu Fri Sat"<<endl;
 29                             for(int i=1;i<=dow;i++)
 30                             {
 31                                 if(dow==7)break;
 32                                 bj++;
 33                                 for(int i=1;i<=3;i++)
 34                                 cout<<" ";
 35                                 cout<<" ";
 36                             }//确定第一个数的位置 
 37                             for(int k=1;k<=rmonth[j];k++)
 38                             {
 39                                 if(k<10)
 40                             {
 41                                 if(bj!=6&&k!=rmonth[j])
 42                                 cout<<"  "<<k<<" ";
 43                                 else
 44                                 {
 45                                     cout<<"  "<<k;
 46                                 }
 47                                 bj++;
 48                                 if(bj==7)
 49                                 {
 50                                     cout<<endl;
 51                                     bj=0;    
 52                                 }
 53                             }
 54                                 else
 55                                 {
 56                                 if(bj!=6&&k!=rmonth[j])
 57                                 cout<<" "<<k<<" ";
 58                                 else
 59                                 {
 60                                     cout<<" "<<k;
 61                                 }
 62                                 if(k==rmonth[j])return 0;
 63                                 bj++;
 64                                 if(bj==7)
 65                                 {
 66                                     cout<<endl;
 67                                     bj=0;    
 68                                 }
 69                             }
 70                             }
 71                             return 0;
 72                         }//边界条件 
 73                         dow++;
 74                         if(dow==8)
 75                         dow=1;
 76                         
 77                 }
 78                  
 79             }
 80         }//闰年 
 81         else
 82         {
 83             for(int j=1;j<=12;j++)
 84             {
 85                 for(int k=1;k<=month[j];k++)
 86                 {
 87                     if(i==enyear&&j==enmonth)
 88                         {
 89                             int bj=0;
 90                             cout<<"Sun Mon Tue Wed Thu Fri Sat"<<endl;
 91                             for(int i=0;i<=dow-1;i++)
 92                             {
 93                                 if(dow==7)break;
 94                                 if(bj==6)break;
 95                                 bj++;
 96                                 for(int i=1;i<=3;i++)
 97                                 cout<<" ";
 98                                 cout<<" ";
 99                             }//确定第一个数的位置 
100                             for(int k=1;k<=month[j];k++)
101                             {
102                             if(k<10)
103                             {
104                                 if(bj!=6&&k!=month[j])
105                                 cout<<"  "<<k<<" ";
106                                 else
107                                 {
108                                     cout<<"  "<<k;
109                                 }
110                                 bj++;
111                                 if(bj==7)
112                                 {
113                                     cout<<endl;
114                                     bj=0;    
115                                 }
116                             }
117                             else
118                             {
119                                 if(bj!=6&&k!=month[j])
120                                 cout<<" "<<k<<" ";
121                                 else
122                                 {
123                                     cout<<" "<<k;
124                                 }
125                                 bj++;
126                                 if(bj==7)
127                                 {
128                                     cout<<endl;
129                                     bj=0;    
130                                 }
131                                 if(k==month[j])return 0;
132                             }
133                             }
134                             return 0;
135                         }//边界条件 
136                         dow++;
137                         if(dow==8)
138                         dow=1;
139                 }       
140                      
141                 
142                 
143                      
144     }
145                 
146 }
147 }
148 }
 





23:区间内的真素数
23:区间内的真素数
总时间限制: 1000ms 内存限制: 65536kB
描述
找出正整数 M 和 N 之间（N 不小于 M）的所有真素数。

真素数的定义：如果一个正整数 P 为素数，且其反序也为素数，那么 P 就为真素数。
例如，11，13 均为真素数，因为11的反序还是为11，13 的反序为 31 也为素数。

输入
输入两个数 M 和 N，空格间隔，1 <= M <= N <= 100000。
输出
按从小到大输出 M 和 N 之间（包括 M 和 N ）的真素数，逗号间隔。如果之间没有真素数，则输出 No。
样例输入
10 35
样例输出
11,13,17,31
题目链接：http://noi.openjudge.cn/ch0113/23/

复制代码
 1 #include<stdio.h>
 2 #include<math.h>
 3 int isPrime(int n)//判断n是否质数
 4 {
 5     int i,t=sqrt(n);
 6     for(i=2;i<=t;i++)
 7     {
 8         if(n%i==0) return 0;
 9     }
10     return 1;
11 } 
12 int isPrime2(int n)//判断n的反序是否质数 
13 {
14     int i,t=0;
15     while(n>0)
16     {
17         t=t*10+n%10;
18         n=n/10;
19     }
20     return isPrime(t);
21 }
22 int main(int argc, char *argv[])
23 {
24     int m,n,i,t=0;
25     scanf("%d%d",&m,&n);
26     for(i=m;i<=n;i++)
27     {
28         if(isPrime(i)&&isPrime2(i))
29         {
30             if(t==0) { printf("%d",i); t=1; }
31             else printf(",%d",i);
32         }
33     }
34     if(t==0) printf("No\n");
35     return 0;
36 }




