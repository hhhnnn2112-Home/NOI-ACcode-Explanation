T01 查找特定元素的值

描述

在一个序列（下标从1开始）中查找一个给定的值，输出第一次出现的位置。

输入

第一行包含一个正整数n，表示序列中元素个数。1 <= n <= 10000。
第二行包含n个整数，依次给出序列的每个元素，相邻两个整数之间用单个空格隔开。元素的绝对值不超过10000。
第三行包含一个整数x，为需要查找的特定值。x的绝对值不超过10000。

输出

若序列中存在x，输出x第一次出现的下标；否则输出-1。

 
样例输入
5
2 3 6 7 3
3
样例输出
2
样例
 
 1 #include<iostream>
 2 #include<cstdio>
 3 using namespace std;
 4 int a[10001],n,m; 
 5 int main()
 6 {
 7     cin>>n;
 8     for(int i=1;i<=n;i++) scanf("%d",&a[i]);
 9     cin>>m;
10     for(int i=1;i<=n;i++)
11      if(a[i]==m) 
12      {
13          cout<<i;return 0;
14      }
15     cout<<-1;
16 }
View Code
T02 输出最高分数的学生姓名

描述

输入学生的人数，然后再输入每位学生的分数和姓名，求获得最高分数的学生的姓名。

输入

第一行输入一个正整数N（N <= 100），表示学生人数。接着输入N行，每行格式如下：
分数 姓名
分数是一个非负整数，且小于等于100；
姓名为一个连续的字符串，中间没有空格，长度不超过20。
数据保证最高分只有一位同学。

输出

获得最高分数同学的姓名。

 
样例输入
5
87 lilei
99 hanmeimei
97 lily
96 lucy
77 jim
样例输出
hanmeimei
样例
不一样的解法：利用map有序存数的特点，慢2ms

 
 1 #include<iostream>
 2 #include<cstdio>
 3 #include<map> 
 4 #include<cstring>
 5 using namespace std;
 6 map<int ,string>mp;
 7 int n; 
 8 int main()
 9 {
10     cin>>n;
11     for(int i=1;i<=n;i++) 
12     {
13         int m;
14         string a;
15         cin>>m>>a;
16         mp[m]=a;
17     }
18     map<int,string>::iterator it=mp.end();
19     it--;
20     cout<<it->second;
21 }
View Code
一般解法：0ms

 
 1 #include<iostream>
 2 #include<cstdio>
 3 #include<cstring>
 4 using namespace std;
 5 int n,maxx; 
 6 string ans;
 7 int m;
 8 string a;
 9 int main()
10 {
11     cin>>n;
12     for(int i=1;i<=n;i++) 
13     {
14         cin>>m>>a;
15         if(m>maxx) 
16         {
17             ans=a;
18             maxx=m;
19         }
20     }
21     cout<<ans;
22 }
View Code2
T03 不高兴的津津

描述

津津上初中了。妈妈认为津津应该更加用功学习，所以津津除了上学之外，还要参加妈妈为她报名的各科复习班。另外每周妈妈还会送她去学习朗诵、舞蹈和钢琴。但是津津如果一天上课超过八个小时就会不高兴，而且上得越久就会越不高兴。假设津津不会因为其它事不高兴，并且她的不高兴不会持续到第二天。请你帮忙检查一下津津下周的日程安排，看看下周她会不会不高兴；如果会的话，哪天最不高兴。

输入

包括七行数据，分别表示周一到周日的日程安排。每行包括两个小于10的非负整数，用空格隔开，分别表示津津在学校上课的时间和妈妈安排她上课的时间。

输出

包括一行，这一行只包含一个数字。如果不会不高兴则输出0，如果会则输出最不高兴的是周几（用1, 2, 3, 4, 5, 6, 7分别表示周一，周二，周三，周四，周五，周六，周日）。如果有两天或两天以上不高兴的程度相当，则输出时间最靠前的一天。

 
样例输入
5 3
6 2
7 2
5 3
5 4
0 4
0 6
样例输出
3
样例
 
 1 #include<iostream>
 2 using namespace std;
 3 int maxx,ans;
 4 int main()
 5 {
 6     int a,b;
 7     for(int i=1;i<=7;i++)
 8      {
 9          cin>>a>>b;
10          if(a+b>maxx)
11          {
12              maxx=a+b;
13              ans=i;
14          }
15      }
16      cout<<ans;
17 }
View Code
T04 谁拿了最多奖学金

描述

某校的惯例是在每学期的期末考试之后发放奖学金。发放的奖学金共有五种，获取的条件各自不同：

1)     院士奖学金，每人8000元，期末平均成绩高于80分（>80），并且在本学期内发表1篇或1篇以上论文的学生均可获得；

2)     五四奖学金，每人4000元，期末平均成绩高于85分（>85），并且班级评议成绩高于80分（>80）的学生均可获得；

3)     成绩优秀奖，每人2000元，期末平均成绩高于90分（>90）的学生均可获得；

4)     西部奖学金，每人1000元，期末平均成绩高于85分（>85）的西部省份学生均可获得；

5)     班级贡献奖，每人850元，班级评议成绩高于80分（>80）的学生干部均可获得；

只要符合条件就可以得奖，每项奖学金的获奖人数没有限制，每名学生也可以同时获得多项奖学金。例如姚林的期末平均成绩是87分，班级评议成绩82分，同时他还是一位学生干部，那么他可以同时获得五四奖学金和班级贡献奖，奖金总数是4850元。

 

现在给出若干学生的相关数据，请计算哪些同学获得的奖金总数最高（假设总有同学能满足获得奖学金的条件）。

输入

第一行是一个整数N（1 <= N <= 100），表示学生的总数。接下来的N行每行是一位学生的数据，从左向右依次是姓名，期末平均成绩，班级评议成绩，是否是学生干部，是否是西部省份学生，以及发表的论文数。姓名是由大小写英文字母组成的长度不超过20的字符串（不含空格）；期末平均成绩和班级评议成绩都是0到100之间的整数（包括0和100）；是否是学生干部和是否是西部省份学生分别用一个字符表示，Y表示是，N表示不是；发表的论文数是0到10的整数（包括0和10）。每两个相邻数据项之间用一个空格分隔。

输出

包括三行，第一行是获得最多奖金的学生的姓名，第二行是这名学生获得的奖金总数。如果有两位或两位以上的学生获得的奖金最多，输出他们之中在输入文件中出现最早的学生的姓名。第三行是这N个学生获得的奖学金的总数。

 
样例输入
4
YaoLin 87 82 Y N 0
ChenRuiyi 88 78 N Y 1
LiXin 92 88 N N 0
ZhangQin 83 87 Y N 1
样例输出
ChenRuiyi
9000
28700
样例
 
 1 #include<iostream>
 2 using namespace std;
 3 int maxx,sum;
 4 string name,a;
 5 int n,qimo,banji,lunwen;
 6 char ganbu,xibu;
 7 int main()
 8 {
 9     cin>>n;
10     for(int i=1;i<=n;i++)
11      {
12          cin>>a>>qimo>>banji>>ganbu>>xibu>>lunwen;
13          int k=0;
14          if(qimo>80&&lunwen) k+=8000;
15          if(qimo>85&&banji>80) k+=4000;
16          if(qimo>90) k+=2000;
17          if(qimo>85&&xibu=='Y') k+=1000;
18          if(banji>80&&ganbu=='Y') k+=850;
19          if(k>maxx)
20          {
21              maxx=k;
22              name=a;
23         }
24         sum+=k;
25      }
26      cout<<name<<endl<<maxx<<endl<<sum;
27 }
View Code
T05 最大值和最小值的差

描述

输出一个整数序列中最大的数和最小的数的差。

输入

第一行为M，表示整数个数，整数个数不会大于10000；
第二行为M个整数，以空格隔开，每个整数的绝对值不会大于10000。

输出

输出M个数中最大值和最小值的差。

 
样例输入
5
2 5 7 4 2
样例输出
5
样例
方法1：读入的时候顺便记录最大最小值，时间6ms，内存464KB

 
 1 #include<iostream>
 2 #include<algorithm>
 3 #include<cstdio>
 4 using namespace std;
 5 int n,x;
 6 int maxx=-100001,minn=100001;
 7 int main()
 8 {
 9     cin>>n;
10     for(int i=1;i<=n;i++)
11     {
12         scanf("%d",&x);
13         maxx=max(maxx,x);
14         minn=min(minn,x);
15     }
16     cout<<maxx-minn;
17 }
View Code1
方法2：读完之后，sort排序，时间12ms，内存464KB

 
 1 #include<iostream>
 2 #include<algorithm>
 3 #include<cstdio>
 4 using namespace std;
 5 int n,a[10001];
 6 int main()
 7 {
 8     cin>>n;
 9     for(int i=1;i<=n;i++)
10         scanf("%d",&a[i]);
11     sort(a+1,a+n+1);
12     cout<<a[n]-a[1];
13 }
View Code2



T06 笨小猴

描述

笨小猴的词汇量很小，所以每次做英语选择题的时候都很头疼。但是他找到了一种方法，经试验证明，用这种方法去选择选项的时候选对的几率非常大！

这种方法的具体描述如下：假设maxn是单词中出现次数最多的字母的出现次数，minn是单词中出现次数最少的字母的出现次数，如果maxn-minn是一个质数，那么笨小猴就认为这是个Lucky Word，这样的单词很可能就是正确的答案。

输入

只有一行，是一个单词，其中只可能出现小写字母，并且长度小于100。

输出

共两行，第一行是一个字符串，假设输入的的单词是Lucky Word，那么输出“Lucky Word”，否则输出“No Answer”；
第二行是一个整数，如果输入单词是Lucky Word，输出maxn-minn的值，否则输出0。

 
样例输入
样例 #1：
error

样例 #2：
olympic
样例输出
样例 #1：
Lucky Word
2

样例 #2：
No Answer
0
样例
本题原来提示中的第二行有错误。

统计所有的字符出现的次数，sort排序，第一个非0的元素是最小值，第26个是最大值，然后判断是否为质数，注意0和1要特判

 
 1 #include<iostream>
 2 #include<algorithm>
 3 #include<cstring>
 4 using namespace std;
 5 int a[30];
 6 char b[101];
 7 int main()
 8 {
 9     cin>>b; 
10     for(int i=0;i<strlen(b);i++)
11      a[b[i]-96]++;
12     sort(a+1,a+27);
13     int k;
14     for(int i=1;i<=26;i++)
15      if(a[i]!=0) 
16      {
17           k=a[i];
18           break;
19      }
20     int c=a[26]-k;
21     if(c==1||c==0)
22     {
23         cout<<"No Answer"<<endl<<0;
24         return 0;
25     }
26     for(int i=2;i*i<=c;i++)
27      if(c%i==0) 
28      {
29          cout<<"No Answer"<<endl<<0;
30          return 0;
31      }
32     cout<<"Lucky Word"<<endl<<c;
33 }
View Code
07:不与最大数相同的数字之和
描述

输出一个整数数列中不与最大数相同的数字之和。

输入

输入分为两行：
第一行为N(N为接下来数的个数，N <= 100)；
第二行为N个整数，数与数之间以一个空格分开，每个整数的范围是-1000,000到1000,000。

输出

输出为N个数中除去最大数其余数字之和。

 

 
样例输入
3
1 2 3 
样例输出
3
样例
 

在读入时记录最大值，还要记录有几个，最后用n个数的和减去

 
 1 #include<iostream>
 2 using namespace std;
 3 int sum,maxx,m;
 4 int main()
 5 {
 6     int n,x;
 7     cin>>n;
 8     for(int i=1;i<=n;i++)
 9     {
10         cin>>x;
11         sum+=x;
12         if(x>maxx) maxx=x,m=1;
13         else if(x==maxx) m++;//前面有else，不用担心最大值在if加了一次，在这儿又加了一次
14     }
15     cout<<sum-m*maxx;
16 }
View Code
T08 白细胞计数

描述

医院采样了某临床病例治疗期间的白细胞数量样本n份，用于分析某种新抗生素对该病例的治疗效果。为了降低分析误差，要先从这n份样本中去除一个数值最大的 样本和一个数值最小的样本，然后将剩余n-2个有效样本的平均值作为分析指标。同时，为了观察该抗生素的疗效是否稳定，还要给出该平均值的误差，即所有有 效样本（即不包括已扣除的两个样本）与该平均值之差的绝对值的最大值。 
现在请你编写程序，根据提供的n个样本值，计算出该病例的平均白细胞数量和对应的误差。

输入

输入的第一行是一个正整数n（2 < n <= 300），表明共有n个样本。
以下共有n行，每行为一个浮点数，为对应的白细胞数量，其单位为10^9/L。数与数之间以一个空格分开。

输出

输出为两个浮点数，中间以一个空格分开。分别为平均白细胞数量和对应的误差，单位也是10^9/L。计算结果需保留到小数点后2位。

 
样例输入
5
12.0
13.0
11.0
9.0
10.0
样例输出
11.00 1.00
样例
注意计算最大误差时，不要直接如果是最大值或最小值就排除，有可能出现两个相同的最值，应该保留一个

 
 1 #include<iostream>
 2 #include<cmath>
 3 #include<algorithm>
 4 #include<cstdio>
 5 using namespace std;
 6 bool ok1,ok2;
 7 double a[1001];
 8 double minn=0x7fffffff,maxx,sum;
 9 double ans;
10 int main()
11 {
12     int n;
13     double x;
14     cin>>n;
15     for(int i=1;i<=n;i++)
16     {
17         cin>>x;
18         a[i]=x;        
19         sum+=x;
20         if(x>maxx) maxx=x;
21         if(x<minn) minn=x;
22     }
23     double m=(sum-maxx-minn)/(n-2);
24     printf("%.2lf",m);
25     printf(" ");
26     for(int i=1;i<=n;i++)
27     {
28         if(a[i]==minn&&!ok1) //只continue掉一个极值
29         { 
30              ok1=true;continue;
31         }
32         if(a[i]==maxx&&!ok2) 
33         {
34              ok2=true;continue;
35         }
36         ans=max(ans,abs(a[i]-m));
37     }
38     printf("%.2lf",ans);
39 }
View Code
开始得了8分，错误代码：

for(int i=1;i<=n;i++) { if(a[i]==minn) continue; if(a[i]==maxx) continue;
忽略了极值有>=2个的情况。例3,3,4,4，只continue一个3.一个4
T09 直方图
描述
给定一个非负整数数组，统计里面每一个数的出现次数。我们只统计到数组里最大的数。

假设 Fmax （Fmax < 10000）是数组里最大的数，那么我们只统计 {0,1,2.....Fmax} 里每个数出现的次数。

输入
第一行n是数组的大小。1 <= n <= 10000。
紧接着一行是数组的n个元素。
输出
按顺序输出每个数的出现次数，一行一个数。如果没有出现过，则输出0。
对于例子中的数组，最大的数是3，因此我们只统计{0,1,2,3}的出现频数。
 
样例输入
5
1 1 2 3 1
样例输出
0
3
1 
1
样例

 1 #include<iostream>
 2 #include<cstdio>
 3 using namespace std;
 4 int n,sum[10001],x,maxx;
 5 int main()
 6 {
 7        cin>>n;
 8        for(int i=1;i<=n;i++)
 9         {
10             scanf("%d",&x);
11             sum[x]++;
12             if(x>maxx) maxx=x;
13         }
14        for(int i=0;i<=maxx;i++)
15        printf("%d\n",sum[i]);
16 }
View Code
T10 找最大数序列
描述
输入n行，每行不超过100个无符号整数，无符号数不超过4位。请输出最大整数以及最大整数所在的行号（行号从1开始）。如果该数据在多个行中出现，则按从小到大输出相应行号，行号之间以一个逗号分开。

输入
一行输入一个正整数n（n <= 30）。
之后的n行，每行包含不超过100个无符号整数，整数之间以一个逗号分开。
输出
第一行：最大整数；
第二行：最大整数所在的行编号，逗号间隔。
 
样例输入
6
1,3,5,23,6,8,14
20,22,13,4,16
23,12,17,22
2,6,10,9,3,6
22,21,20,8,10
22,1,23,6,8,19,23
样例输出
23
1,3,6
样例
本题的读入方式有好几种。

1、按字符串把一行读进去，再根据逗号断开。

2、一个字符一个字符的读。

以下是第二种方法，读入方法思路来源于读入优化。

 
 1 #include<iostream>
 2 #include<cstring>
 3 #include<cstdio>
 4 using namespace std;
 5 int n,h,x,sl=1,l=1;
 6 int ans[3001],sum,maxn=-1;
 7 char c;
 8 int a[31][102];
 9 void init()//修改的读入优化 
10 {
11     c=getchar();
12     while(h<=n)
13     {
14         if(c=='\n') 
15           {
16             if(h) 
17             {
18                 a[h][l]=x;
19                 a[h][l+1]=99999;
20                 x=0;
21             }
22             h++;
23             l=1;
24             if(h<=n)
25             c=getchar();
26             continue;
27         }
28         if(c==',') 
29         {
30             a[h][l]=x;
31             l++;
32             x=0;
33             c=getchar();
34             continue;
35         }
36         while(c>='0'&&c<='9')
37         {
38         x=x*10+c-'0';
39         c=getchar();
40         }
41     }
42 }
43 int main()
44 {
45     cin>>n;
46     init();
47     for(int i=1;i<=n;i++)
48     {
49         int j=1;
50         while(a[i][j]!=99999)
51         {
52             if(a[i][j]==maxn&&ans[sum]!=i)//一行里可能有好几个最大数，但只能输出一个，所以ans【sum】！=i 
53               ans[++sum]=i;
54             else if(a[i][j]>maxn)
55             {
56                 sum=0;
57                 ans[++sum]=i;
58                 maxn=a[i][j];
59             }
60             j++;
61         }
62     }
63     cout<<maxn<<endl;
64     for(int i=1;i<sum;i++) cout<<ans[i]<<',';
65     cout<<ans[sum];
66 }
View Code
第二种方法的另一种代码参照链接，来源：myj

T11 连续出现的字符

描述

给定一个字符串，在字符串中找到第一个连续出现至少k次的字符。

输入

第一行包含一个正整数k，表示至少需要连续出现的次数。1 <= k <= 1000。
第二行包含需要查找的字符串。字符串长度在1到1000之间，且不包含任何空白符。

输出

若存在连续出现至少k次的字符，输出该字符；否则输出No。

 
样例输入
3
abcccaaab
样例输出
c
样例
 
 1 #include<cstdio>
 2 #include<iostream>
 3 #include<cstring>
 4 char a[1001];
 5 int n,now=1; 
 6 using namespace std;
 7 int main()
 8 {
 9     cin>>n;
10     cin>>a;
11     if(n==1)
12     {
13         cout<<a[0];
14         return 0;
15     }
16     for(int i=1;i<strlen(a);i++)
17     {
18         if(a[i]==a[i-1]) now++;
19         else now=1;
20         if(now==n)
21         {
22             cout<<a[i];
23             return 0;
24         }
25     }
26     cout<<"No";
27 } 
View Code
T12 最长平台

描述

已知一个已经从小到大排序的数组，这个数组的一个平台（Plateau）就是连续的一串值相同的元素，并且这一串元素不能再延伸。例如，在 1，2，2，3，3，3，4，5，5，6中1，2-2，3-3-3，4，5-5，6都是平台。试编写一个程序，接收一个数组，把这个数组最长的平台找出 来。在上面的例子中3-3-3就是最长的平台。

输入

第一行有一个整数n(n <= 1000)，为数组元素的个数。第二行有n个整数，整数之间以一个空格分开。

输出

输出最长平台的长度。

 
样例输入
10
1 2 2 3 3 3 4 5 5 6
样例输出
3
样例
 
#include<cstdio>
#include<iostream>
#include<cstring>
int n,now=1,maxn=1,x,last; 
using namespace std;
int main()
{
    cin>>n;
    cin>>last;
    for(int i=2;i<=n;i++)
    {
        scanf("%d",&x);
        if(x==last) now++;
        else now=1;
        if(now>maxn) maxn=now;
        last=x;
    }
    cout<<maxn;
} 
View Code
T13 整数去重

描述

给定含有n个整数的序列，要求对这个序列进行去重操作。所谓去重，是指对这个序列中每个重复出现的数，只保留该数第一次出现的位置，删除其余位置。

输入

输入包含两行：
第一行包含一个正整数n（1 <= n <= 20000），表示第二行序列中数字的个数；
第二行包含n个整数，整数之间以一个空格分开。每个整数大于等于10、小于等于100。

输出

输出只有一行，按照输入的顺序输出其中不重复的数字，整数之间用一个空格分开。

 
样例输入
5
10 12 93 12 75
样例输出
10 12 93 75
样例
 
 1 #include<cstdio>
 2 #include<iostream>
 3 #include<cstring>
 4 int n,now=1,maxn=1;
 5 int a[20001];
 6 bool v[101];
 7 using namespace std;
 8 int main()
 9 {
10     cin>>n;
11     for(int i=1;i<=n;i++)
12     {
13         scanf("%d",&a[i]);
14         if(!v[a[i]]) 
15         {
16            v[a[i]]=true;
17            cout<<a[i]<<' ' ;
18         } 
19     }    
20 } 
View Code
T 14铺地毯

描述

为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有n张地毯，编号从1到n。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。地毯铺设完成后，组织者想知道覆盖地面某个点的最上面的那张地毯的编号。注意：在矩形地毯边界和四个顶点上的点也算被地毯覆盖。

输入输出样例1说明：如下图，1号地毯用实线表示，2号地毯用虚线表示，3号用双实线表示，覆盖点（2，2）的最上面一张地毯是3号地毯。

输入输出样例2说明：如下图，1号地毯用实线表示，2号地毯用虚线表示，3号用双实线表示，覆盖点（4，5）的最上面一张地毯是3号地毯。



 

输入

输入共n+2行。
第一行，一个整数n，表示总共有n张地毯。
接下来的n行中，第i+1行表示编号i的地毯的信息，包含四个正整数a，b，g，k，每两个整数之间用一个空格隔开，分别表示铺设地毯的左下角的坐标（a，b）以及地毯在x轴和y轴方向的长度。
第n+2行包含两个正整数x和y，表示所求的地面的点的坐标（x，y）。

对于30%的数据，有n≤2；
对于50%的数据，0≤a, b, g, k≤100；
对于100%的数据，有0≤n≤10,000，0≤a, b, g, k≤100,000。

输出

输出共1行，一个整数，表示所求的地毯的编号；若此处没有被地毯覆盖则输出-1。

 
样例输入
样例 #1：
3
1 0 2 3
0 2 3 3
2 1 3 3
2 2

样例 #2：
3
1 0 2 3
0 2 3 3
2 1 3 3
4 5
样例输出
样例 #1：
3

样例 #2：
-1
样例
倒着往前找

 
 1 #include<iostream>
 2 #include<cstdio>
 3 using namespace std;
 4 int n,x,y;
 5 int a[10001],b[10001],g[10001],k[10001];
 6 int main()
 7 {
 8     scanf("%d",&n);
 9     for(int i=1;i<=n;i++)
10      scanf("%d%d%d%d",&a[i],&b[i],&g[i],&k[i]);
11     scanf("%d%d",&x,&y);
12     for(int i=n;i>=1;i--)
13     {
14         if(x>=a[i]&&x<=a[i]+g[i]&&y>=b[i]&&y<=b[i]+k[i])
15          {
16              cout<<i;
17              return 0;
18          }
19     }
20     cout<<-1;
21 }
View Code
T15 接水问题 

描述

学校里有一个水房，水房里一共装有 m 个龙头可供同学们打开水，每个龙头每秒钟的供水量相等，均为 1。

现在有 n 名同学准备接水，他们的初始接水顺序已经确定。将这些同学按接水顺序从 1 到 n 编号，i号同学的接水量为 wi。接水开始时，1 到 m 号同学各占一个水龙头，并同时打开水龙头接水。当其中某名同学 j 完成其接水量要求 wj后，下一名排队等候接水的同学 k 马上接替 j 同学的位置开始接水。这个换人的过程是瞬间完成的，且没有任何水的浪费。即 j 同学第 x 秒结束时完成接水，则 k 同学第 x+1 秒立刻开始接水。 若当前接水人数 n’不足 m，则只有 n’个龙头供水，其它 m-n’个龙头关闭。

现在给出 n 名同学的接水量，按照上述接水规则，问所有同学都接完水需要多少秒。

输入

第 1 行2 个整数 n 和 m，用一个空格隔开，分别表示接水人数和龙头个数。
第 2 行 n 个整数 w1、w2、……、wn，每两个整数之间用一个空格隔开，wi表示 i 号同学的接水量。

1 ≤ n ≤ 10000，1 ≤ m ≤ 100 且 m ≤ n；
1 ≤ wi ≤ 100。

输出

输出只有一行，1 个整数，表示接水所需的总时间。

 
样例输入
样例 #1：
5 3
4 4 1 2 1

样例 #2：
8 4
23 71 87 32 70 93 80 76
样例输出
样例 #1：
4

样例 #2：
163
样例
利用优先队列，将其转化为小根堆，前m个先存进去，每次取出队首元素加上下一个再存进去，最后一只清空队列，最后一个数即为答案

 
 1 #include<iostream>
 2 #include<queue>
 3 #include<cstdio>
 4 using namespace std;
 5 priority_queue<int,vector<int>,greater<int> >p;//转化为小根堆
 6 int n,m,x,ans;
 7 int main()
 8 {
 9     scanf("%d%d",&n,&m);
10     for(int i=1;i<=m;i++)
11     {
12         scanf("%d",&x);
13         p.push(x);
14     }
15     for(int i=m+1;i<=n;i++)
16     {
17         scanf("%d",&x);
18         int t=p.top();
19         p.pop();
20         t+=x;
21         p.push(t);
22     }
23     while(!p.empty())
24     {
25         ans=p.top();
26         p.pop();
27     }
28     printf("%d",ans);
29 }
View Code